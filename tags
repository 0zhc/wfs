!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BITMAP_BLOCK	WFS.h	4;"	d
ClearBlocks	WFS.c	/^void ClearBlocks(long next_blk, struct data_block* data_blk) {$/;"	f
D_FILE_OFFSET_BITS	makefile	/^	gcc -Wall -D_FILE_OFFSET_BITS=64 -g -c -o WFS.o WFS.c$/;"	m
D_FILE_OFFSET_BITS	makefile	/^	gcc -Wall -D_FILE_OFFSET_BITS=64 -g -c -o init_disk.o init_disk.c$/;"	m
D_FILE_OFFSET_BITS	makefile	/^	gcc WFS.o -o WFS -Wall -D_FILE_OFFSET_BITS=64 -g -pthread -lfuse3 -lrt -ldl$/;"	m
FS_BLOCK_SIZE	WFS.h	2;"	d
FUSE_USE_VERSION	WFS.c	1;"	d	file:
MAX_DATA_IN_BLOCK	WFS.h	6;"	d
MAX_DIR_IN_BLOCK	WFS.h	7;"	d
MAX_EXTENSION	WFS.h	9;"	d
MAX_FILENAME	WFS.h	8;"	d
ROOT_DIR_BLOCK	WFS.h	5;"	d
SUPER_BLOCK	WFS.h	3;"	d
TOTAL_BLOCK_NUM	WFS.h	/^long TOTAL_BLOCK_NUM;$/;"	v
WFS_access	WFS.c	/^static int WFS_access(const char *path, int flag) {$/;"	f	file:
WFS_getattr	WFS.c	/^static int WFS_getattr(const char *path, struct stat *stbuf, struct fuse_file_info *fi)  {$/;"	f	file:
WFS_init	WFS.c	/^static void* WFS_init(struct fuse_conn_info *conn) {$/;"	f	file:
WFS_mkdir	WFS.c	/^static int WFS_mkdir (const char *path, mode_t mode) {$/;"	f	file:
WFS_mknod	WFS.c	/^static int WFS_mknod (const char *path, mode_t mode, dev_t dev) {$/;"	f	file:
WFS_open	WFS.c	/^static int WFS_open(const char *path, struct fuse_file_info *fi) {$/;"	f	file:
WFS_oper	WFS.c	/^static struct fuse_operations WFS_oper = {$/;"	v	typeref:struct:fuse_operations	file:
WFS_read	WFS.c	/^static int WFS_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi) {$/;"	f	file:
WFS_readdir	WFS.c	/^static int WFS_readdir(const char *path, void *buf, fuse_fill_dir_t filler,off_t offset, struct fuse_file_info *fi)\/\/,enum use_readdir_flags flags)$/;"	f	file:
WFS_rmdir	WFS.c	/^static int WFS_rmdir (const char *path) {$/;"	f	file:
WFS_unlink	WFS.c	/^static int WFS_unlink (const char *path) {$/;"	f	file:
WFS_write	WFS.c	/^static int WFS_write (const char *path, const char *buf, size_t size, off_t offset, struct fuse_file_info *fi)$/;"	f	file:
atime	WFS.h	/^    time_t atime; 	\/* 上次访问时间 *\/$/;"	m	struct:file_directory
bitmap	WFS.h	/^    long bitmap; \/\/size of bitmap, in blocks（以块为单位）$/;"	m	struct:super_block
create_file_dir	WFS.c	/^int create_file_dir(const char* path, int flag) {$/;"	f
data	WFS.h	/^    char data[MAX_DATA_IN_BLOCK];\/\/ And all the rest of the space in the block can be used for actual data storage.$/;"	m	struct:data_block
data_block	WFS.h	/^struct data_block {$/;"	s
disk_path	WFS.h	/^char *disk_path="\/tmp\/diskimg";$/;"	v
divide_path	WFS.c	/^int divide_path(char *name, char *ext, const char *path, long *par_dir_stblk, int flag, int *par_size) {$/;"	f
exist_check	WFS.c	/^int exist_check(struct file_directory *file_dir, char *p, char *q, int *offset, int *pos, int size, int flag) $/;"	f
fext	WFS.h	/^    char fext[MAX_EXTENSION + 1]; \/\/扩展名 (plus space for nul)$/;"	m	struct:file_directory
file_directory	WFS.h	/^struct file_directory {$/;"	s
first_blk	WFS.h	/^    long first_blk; \/\/first block of root directory（根目录的起始块位置，以块为单位）$/;"	m	struct:super_block
flag	WFS.h	/^    int flag; \/\/indicate type of file. 0:for unused; 1:for file; 2:for directory$/;"	m	struct:file_directory
fname	WFS.h	/^    char fname[MAX_FILENAME + 1]; \/\/文件名 (plus space for nul)$/;"	m	struct:file_directory
fs_size	WFS.h	/^    long fs_size; \/\/size of file system, in blocks（以块为单位）$/;"	m	struct:super_block
fsize	WFS.h	/^    size_t fsize;   \/\/文件大小（file size）$/;"	m	struct:file_directory
get_empty_blk	WFS.c	/^int get_empty_blk(int num, long* start_blk) {$/;"	f
get_fd_to_attr	WFS.c	/^int get_fd_to_attr(const char * path,struct file_directory *attr) {$/;"	f
main	WFS.c	/^int main(int argc, char *argv[]) {$/;"	f
main	init_disk.c	/^int main()$/;"	f
mode	WFS.h	/^    int mode;       \/\/$/;"	m	struct:file_directory
mtime	WFS.h	/^    time_t mtime;	\/*上次修改时间 *\/$/;"	m	struct:file_directory
nNextBlock	WFS.h	/^    long nNextBlock; \/\/（该文件太大了，一块装不下，所以要有下一块的地址）   long的大小为4Byte$/;"	m	struct:data_block
nStartBlock	WFS.h	/^    long nStartBlock; \/\/目录开始块位置（where the first block is on disk）$/;"	m	struct:file_directory
path_is_emp	WFS.c	/^int path_is_emp(const char* path) {$/;"	f
read_cpy_data_block	WFS.c	/^int read_cpy_data_block(long blk_no,struct data_block *data_blk) {$/;"	f
read_cpy_file_dir	WFS.c	/^void read_cpy_file_dir(struct file_directory *a,struct file_directory *b) {$/;"	f
remove_file_dir	WFS.c	/^int remove_file_dir(const char *path, int flag) {$/;"	f
set_blk_use	WFS.c	/^int set_blk_use(long start_blk,int flag) {$/;"	f
setattr	WFS.c	/^int setattr(const char* path, struct file_directory* attr, int flag)  {$/;"	f
size	WFS.h	/^    size_t size; \/\/文件使用了这个块里面的多少Bytes$/;"	m	struct:data_block
super_block	WFS.h	/^struct super_block {$/;"	s
uid	WFS.h	/^    int uid;        \/\/$/;"	m	struct:file_directory
write_data_block	WFS.c	/^int write_data_block(long blk_no,struct data_block *data_blk) {$/;"	f
